-- Usando WHILE

-- WHILE boolean_expression
--	{sql_statement | statement_block | BREAK | CONTINUE}

-- Boolen expression: É ua expressão que retorna TRUE ou FALSE. Se há comando SELECT, colocar entre parênteses
-- { sql_statement | statement_block}: É qualquer instrução T-SQL conforme definido com um bloco de instruções. Usar BEGIN e END para definir um bloco de inistruções
-- BREAK: Provoca úma saída do loop WHILE mais interno
-- CONTINUE: Faz com que o loop WHILE seja reiniciado, ignorando todas as instruções depois da palavra CONTINUE

/*
DECLARE @LIMITE_MINIMO INT,
		@LIMITE_MAXIMO INT,
		@LIMITE_BREAK INT

SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 10
SET @LIMITE_BREAK = 5

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
	PRINT @LIMITE_MINIMO
	SET @LIMITE_MINIMO = @LIMITE_MINIMO +1
	IF @LIMITE_MINIMO = @LIMITE_BREAK
	BEGIN
		PRINT 'SAINDO POR CAUSA DO BREAK'
	END
END
*/
-- Sabendo que a função abaixo soma um dia a uma data:
-- SELECT DATEADD(DAY, 1, @DATA)
-- Faça um script que, a partir do dia 01/01/2017, conte o número de notas fiscais até o dia 10/01/2017. Imprima a data e o número de notas fiscais.
/*
DECLARE @DATA_INICIAL DATE,
		@DATA_FINAL DATE,
		@QUANTIDADE_NOTAS INT

SET @DATA_INICIAL = '20170101'
SET @DATA_FINAL = '20170110'

WHILE @DATA_INICIAL <= @DATA_FINAL
BEGIN
	SELECT @QUANTIDADE_NOTAS = COUNT(*) FROM [NOTAS FISCAIS] WHERE DATA = @DATA_INICIAL
	PRINT 'QUANTIDADE NOTAS: ' + CONVERT(VARCHAR(5), @QUANTIDADE_NOTAS) + '   ' +
	'DATA: ' + CONVERT(VARCHAR(10), @DATA_INICIAL)
	SELECT @DATA_INICIAL = DATEADD(DAY, 1, @DATA_INICIAL)
END
*/

-- Inluindo valores numa tabela dentro do while
/*
IF OBJECT_ID('TABELA DE NUMERO', 'U') IS NOT NULL
	DROP TABLE [TABELA DE NUMEROS]

CREATE TABLE [TABELA DE NUMEROS]
	( NUMERO INT,
	  STATUS VARCHAR(200))

-- Usarei as variaveis criadas la em cima
DECLARE @LIMITE_MINIMO INT,
		@LIMITE_MAXIMO INT,
		@CONTADOR_NOTAS INT

SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 1000

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
	SELECT @CONTADOR_NOTAS = COUNT(*) FROM [NOTAS FISCAIS] WHERE NUMERO = @LIMITE_MINIMO

	IF @CONTADOR_NOTAS > 0
		INSERT INTO [TABELA DE NUMEROS] (NUMERO, [STATUS]) VALUES (@LIMITE_MINIMO, 'É NOTA FISCAL')
	ELSE
		INSERT INTO [TABELA DE NUMEROS] (NUMERO, [STATUS]) VALUES (@LIMITE_MINIMO, 'NÃO É NOTA FISCAL')

	SET @LIMITE_MINIMO = @LIMITE_MINIMO +1
	
END

SELECT
	*
FROM
	[TABELA DE NUMEROS]
*/

-- Continue evoluindo o script da resposta do exercício anterior. Agora, inclua o dia e o número de notas em uma tabela.

IF OBJECT_ID('TABELA DE NUMERO', 'U') IS NOT NULL
	DROP TABLE [TABELA DE NUMEROS]

CREATE TABLE [TABELA DE NUMEROS]
	( [DATA NOTA] DATE,
	  [QUANTIDADE NOTAS] INT)

-- Usarei as variaveis criadas la em cima
DECLARE @DATA_INICIAL DATE,
		@DATA_FINAL DATE,
		@QUANTIDADE_NOTAS INT,
		@LIMITE_MINIMO INT,
		@LIMITE_MAXIMO INT,
		@CONTADOR_NOTAS INT

SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 1000
SET @DATA_INICIAL = '20170101'
SET @DATA_FINAL = '20170110'


WHILE @DATA_INICIAL <= @DATA_FINAL
BEGIN
	SELECT @QUANTIDADE_NOTAS = COUNT(*) FROM [NOTAS FISCAIS] WHERE DATA = @DATA_INICIAL
	IF @QUANTIDADE_NOTAS > 0
		INSERT INTO [TABELA DE NUMEROS] ([DATA NOTA], [QUANTIDADE NOTAS]) VALUES (@DATA_INICIAL, @QUANTIDADE_NOTAS)
	ELSE
		INSERT INTO [TABELA DE NUMEROS] ([DATA NOTA], [QUANTIDADE NOTAS]) VALUES (@DATA_INICIAL, @QUANTIDADE_NOTAS)
	SELECT @DATA_INICIAL = DATEADD(DAY, 1, @DATA_INICIAL)
END

SELECT
	*
FROM 
	[TABELA DE NUMEROS]